
#include "ExN03PhysicsList.hh"

#include "G4ProcessManager.hh"
#include "G4ParticleTypes.hh"

#include "G4LeptonConstructor.hh"
#include "G4BosonConstructor.hh"
#include "G4MesonConstructor.hh"
#include "G4BaryonConstructor.hh"
#include "G4IonConstructor.hh"
#include "G4ShortLivedConstructor.hh"



ExN03PhysicsList::ExN03PhysicsList():  G4VUserPhysicsList()
{
  defaultCutValue = 0.01*mm;
  SetVerboseLevel(1);
}


ExN03PhysicsList::~ExN03PhysicsList()
{}


void ExN03PhysicsList::ConstructParticle()
{

 G4LeptonConstructor pLep;pLep.ConstructParticle();
 G4BosonConstructor pBos;pBos.ConstructParticle();
 G4MesonConstructor pMes;pMes.ConstructParticle();
 G4BaryonConstructor pBar;pBar.ConstructParticle();
 G4IonConstructor pIon;pIon.ConstructParticle();
 G4ShortLivedConstructor pSho;pSho.ConstructParticle();
 

}



void ExN03PhysicsList::ConstructProcess()
{
  AddTransportation();
  ConstructEM();
  ConstructDecay();
  ConstructHadron();
  ConstructIon();
}



#include "G4ComptonScattering.hh"
#include "G4GammaConversion.hh"
#include "G4PhotoElectricEffect.hh"
#include "G4eMultipleScattering.hh"
#include "G4hMultipleScattering.hh"
#include "G4eIonisation.hh"
#include "G4eBremsstrahlung.hh"
#include "G4eplusAnnihilation.hh"
#include "G4MuIonisation.hh"
#include "G4MuBremsstrahlung.hh"
#include "G4MuPairProduction.hh"
#include "G4hIonisation.hh"
#include "G4hBremsstrahlung.hh"
#include "G4hPairProduction.hh"
#include "G4ionIonisation.hh"
void ExN03PhysicsList::ConstructEM()
{
  theParticleIterator->reset();
  while( (*theParticleIterator)() ){
    G4ParticleDefinition* particle = theParticleIterator->value();
    G4ProcessManager* pmanager = particle->GetProcessManager();
    G4String particleName = particle->GetParticleName();
    
    if (particleName == "gamma") {
      // gamma         
      pmanager->AddDiscreteProcess(new G4PhotoElectricEffect);
      pmanager->AddDiscreteProcess(new G4ComptonScattering);
      pmanager->AddDiscreteProcess(new G4GammaConversion);
      
    } else if (particleName == "e-") {
      //electron
      pmanager->AddProcess(new G4eMultipleScattering,-1, 1, 1);
      pmanager->AddProcess(new G4eIonisation,        -1, 2, 2);
      pmanager->AddProcess(new G4eBremsstrahlung,    -1, 3, 3);      

    } else if (particleName == "e+") {
      //positron
      pmanager->AddProcess(new G4eMultipleScattering,-1, 1, 1);
      pmanager->AddProcess(new G4eIonisation,        -1, 2, 2);
      pmanager->AddProcess(new G4eBremsstrahlung,    -1, 3, 3);
      pmanager->AddProcess(new G4eplusAnnihilation,   0,-1, 4);
    
    } else if( particleName == "mu+" || 
               particleName == "mu-"    ) {
      //muon  
      pmanager->AddProcess(new G4hMultipleScattering,-1, 1, 1);
      pmanager->AddProcess(new G4MuIonisation,       -1, 2, 2);
      pmanager->AddProcess(new G4MuBremsstrahlung,   -1, 3, 3);
      pmanager->AddProcess(new G4MuPairProduction,   -1, 4, 4);
             
    } else if( particleName == "proton" ||
               particleName == "pi-" ||
               particleName == "pi+"    ) {
      //proton  
      pmanager->AddProcess(new G4hMultipleScattering, -1, 1, 1);
      pmanager->AddProcess(new G4hIonisation,         -1, 2, 2);
      pmanager->AddProcess(new G4hBremsstrahlung,     -1, 3, 3);
      pmanager->AddProcess(new G4hPairProduction,     -1, 4, 4);       
     
    } else if( particleName == "alpha" || 
	       particleName == "He3" || 
	       particleName == "GenericIon" ) {
      //Ions 
      pmanager->AddProcess(new G4hMultipleScattering, -1, 1, 1);
      pmanager->AddProcess(new G4ionIonisation,       -1, 2, 2);
      
      } else if ((!particle->IsShortLived()) &&
	       (particle->GetPDGCharge() != 0.0) && 
	       (particle->GetParticleName() != "chargedgeantino")) {
      //all others charged particles except geantino
      pmanager->AddProcess(new G4hMultipleScattering,-1, 1, 1);
      pmanager->AddProcess(new G4hIonisation,        -1, 2, 2);        
    }     
  }
}



#include "G4Decay.hh"
#include "G4RadioactiveDecay.hh"
void ExN03PhysicsList::ConstructDecay()
{
  // Add Decay Process
  G4Decay* theDecayProcess = new G4Decay();
  theParticleIterator->reset();
  while( (*theParticleIterator)() ){
    G4ParticleDefinition* particle = theParticleIterator->value();
    G4ProcessManager* pmanager = particle->GetProcessManager();
    if (theDecayProcess->IsApplicable(*particle)) { 
      pmanager ->AddProcess(theDecayProcess);
      // set ordering for PostStepDoIt and AtRestDoIt
      pmanager ->SetProcessOrdering(theDecayProcess, idxPostStep);
      pmanager ->SetProcessOrdering(theDecayProcess, idxAtRest);
    }
  }
  
  const G4IonTable *theIonTable = G4ParticleTable::GetParticleTable()->GetIonTable();
  G4RadioactiveDecay *theRadioactiveDecay = new G4RadioactiveDecay();
  theRadioactiveDecay->SetVerboseLevel(0);
  theRadioactiveDecay->SetAnalogueMonteCarlo(true);
  theRadioactiveDecay->SetFBeta(true);
  for(G4int i=0;i<theIonTable->Entries();i++) {
   G4String particleName = theIonTable->GetParticle(i)->GetParticleName();
   if(particleName=="GenericIon") {
    G4ProcessManager* pmanager = theIonTable->GetParticle(i)->GetProcessManager();
    pmanager->SetVerboseLevel(0);
    pmanager->AddProcess(theRadioactiveDecay);
    pmanager->SetProcessOrdering(theRadioactiveDecay,idxPostStep);
    pmanager->SetProcessOrdering(theRadioactiveDecay,idxAtRest);
   };
  };
}


#include "G4AntiNeutronAnnihilationAtRest.hh"
//#include "G4AntiProtonAnnihilationAtRest.hh"
//#include "G4KaonMinusAbsorptionAtRest.hh"
//#include "G4PionMinusAbsorptionAtRest.hh"
// #include "G4MuonMinusCaptureAtRest.hh"
#include "G4HadronElasticProcess.hh"   
#include "G4HadronInelasticProcess.hh"
#include "G4ProtonInelasticProcess.hh"
//#include "G4AntiProtonInelasticProcess.hh"
//#include "G4LEAntiProtonInelastic.hh"
//#include "G4HEAntiProtonInelastic.hh"
#include "G4NeutronInelasticProcess.hh" 
//#include "G4AntiNeutronInelasticProcess.hh" 
//#include "G4LEAntiNeutronInelastic.hh" 
//#include "G4HEAntiNeutronInelastic.hh" 
#include "G4HadronFissionProcess.hh"   
#include "G4HadronCaptureProcess.hh"         
#include "G4NeutronHPElastic.hh"
#include "G4NeutronHPInelastic.hh"
#include "G4NeutronHPFission.hh"
#include "G4NeutronHPCapture.hh"
// high precision < 20 CLHEP::MeV
#include "G4NeutronHPCaptureData.hh"
#include "G4NeutronHPFissionData.hh"
#include "G4NeutronHPElasticData.hh"
#include "G4NeutronHPInelasticData.hh"
// generic models for 0 to infinite energy (used for E > 20 CLHEP::MeV)
// (these may actually be "translations" of the GEANT3.21/GHEISHA models....)
//#include "G4LElastic.hh"
#include "G4LFission.hh"
#include "G4LCapture.hh"
// Low energy (used for 20 CLHEP::MeV < E < 50 GeV)
#include "G4LENeutronInelastic.hh"  // 0 to 55 GeV
// High energy (used for > 50 GeV)
#include "G4HENeutronInelastic.hh"  // 45 GeV to 10 TeV
#include "G4PiNuclearCrossSection.hh"
#include "G4NeutronIsotopeProduction.hh"

#include "G4TheoFSGenerator.hh"
#include "G4GeneratorPrecompoundInterface.hh"
#include "G4QGSModel.hh"
#include "G4QGSMFragmentation.hh"
#include "G4ExcitedStringDecay.hh"
#include "G4Evaporation.hh"
#include "G4FermiBreakUp.hh"
#include "G4StatMF.hh"
#include "G4ExcitationHandler.hh"
#include "G4PreCompoundModel.hh"
#include "G4BinaryCascade.hh"


#define G4std std
inline void AddDataSet(class G4HadronicProcess* p, class G4VCrossSectionDataSet* d) {p->AddDataSet(d);}

void ExN03PhysicsList::ConstructHadron()
{
  G4ProcessManager* pmanager = 0;

 // high energy model
 G4TheoFSGenerator *theModel = new G4TheoFSGenerator;
 G4GeneratorPrecompoundInterface *theCascade = new G4GeneratorPrecompoundInterface;
 theModel->SetTransport(theCascade);
 G4QGSModel< G4QGSParticipants > *theStringModel = new G4QGSModel<G4QGSParticipants>;
 theModel->SetHighEnergyGenerator(theStringModel);
 G4QGSMFragmentation *theFragmentation = new G4QGSMFragmentation;
 G4ExcitedStringDecay *theStringDecay = new G4ExcitedStringDecay(theFragmentation);
 theStringModel->SetFragmentationModel(theStringDecay);
 theModel->SetMinEnergy(6*GeV);
 theModel->SetMaxEnergy(100*TeV);

  // all models for treatment of thermal nucleus 
 G4Evaporation *theEvaporation = new G4Evaporation;
 G4FermiBreakUp  *theFermiBreakUp = new G4FermiBreakUp;
 G4StatMF *theMF = new G4StatMF;
 G4ExcitationHandler *theHandler = new G4ExcitationHandler;
 theHandler->SetEvaporation(theEvaporation);
 theHandler->SetFermiModel(theFermiBreakUp);
 theHandler->SetMultiFragmentation(theMF);
 theHandler->SetMaxAandZForFermiBreakUp(12, 6);
 theHandler->SetMinEForMultiFrag(3.*CLHEP::MeV);
 // pre-equilibrium stage 
 G4PreCompoundModel *thePreEquilib = new G4PreCompoundModel(theHandler);
 thePreEquilib->SetMaxEnergy(70*CLHEP::MeV);
 // pre-equilibrium for neutrons 
 G4PreCompoundModel *thePreEqNeutron = new G4PreCompoundModel(theHandler);
 thePreEqNeutron->SetMinEnergy(19*CLHEP::MeV);
 thePreEqNeutron->SetMaxEnergy(70*CLHEP::MeV);
 // Binary cascade 
 G4BinaryCascade* theCasc = new G4BinaryCascade;
 theCasc->SetMinEnergy(65*CLHEP::MeV);
 theCasc->SetMaxEnergy(6.1*GeV);


  //proton
  pmanager = G4Proton::Proton()->GetProcessManager();
  G4HadronElasticProcess* thepElasticProcess = new G4HadronElasticProcess();
  G4LElastic* thepElasticModel = new G4LElastic();
  thepElasticProcess->RegisterMe(thepElasticModel);
  pmanager->AddDiscreteProcess(thepElasticProcess);
  G4ProtonInelasticProcess* theProtonInelasticProcess = new G4ProtonInelasticProcess(); 
  theProtonInelasticProcess->RegisterMe(thePreEquilib);
  theProtonInelasticProcess->RegisterMe(theCasc);
  theProtonInelasticProcess->RegisterMe(theModel);
  pmanager->AddDiscreteProcess(theProtonInelasticProcess);

 
   //anti-proton
   pmanager = G4AntiProton::AntiProton()->GetProcessManager();
   G4HadronElasticProcess* theapElasticProcess = new G4HadronElasticProcess();
   G4LElastic* theapElasticModel = new G4LElastic();
   theapElasticProcess->RegisterMe(theapElasticModel);
   pmanager->AddDiscreteProcess(theapElasticProcess);
   G4AntiProtonInelasticProcess* theAntiProtonInelasticProcess = new G4AntiProtonInelasticProcess(); 
   G4LEAntiProtonInelastic* theAntiProtonLEPModel = new G4LEAntiProtonInelastic();
   G4HEAntiProtonInelastic* theAntiProtonHEPModel = new G4HEAntiProtonInelastic();
   theAntiProtonInelasticProcess->RegisterMe(theAntiProtonLEPModel);
   theAntiProtonInelasticProcess->RegisterMe(theAntiProtonHEPModel);
   pmanager->AddDiscreteProcess(theAntiProtonInelasticProcess);
   G4AntiProtonAnnihilationAtRest* theAntiProtonAnnihilation = new G4AntiProtonAnnihilationAtRest();
   pmanager->AddRestProcess(theAntiProtonAnnihilation);

   //neutron
   pmanager = G4Neutron::Neutron()->GetProcessManager();
   G4HadronElasticProcess*  theHadronElasticProcess = new G4HadronElasticProcess();
   G4LElastic* theNeutronLElastic = new   G4LElastic();
   //theHadronElasticProcess->RegisterMe( theNeutronLElastic );
   G4NeutronHPElastic* theNeutronHPElastic = new   G4NeutronHPElastic();
   theNeutronHPElastic->SetMaxEnergy( 20.*CLHEP::MeV );
   theNeutronLElastic->SetMinEnergy( 20.*CLHEP::MeV );
   theHadronElasticProcess->RegisterMe( theNeutronHPElastic );
   theHadronElasticProcess->RegisterMe( theNeutronLElastic );
   AddDataSet(theHadronElasticProcess, new G4NeutronHPElasticData() );
   pmanager->AddDiscreteProcess( theHadronElasticProcess );

   G4NeutronInelasticProcess* theNeutronInelasticProcess = new G4NeutronInelasticProcess();
   //G4LENeutronInelastic* theNeutronLENeutronInelastic = new G4LENeutronInelastic();
   G4HENeutronInelastic* theNeutronHENeutronInelastic = new G4HENeutronInelastic();
   //theNeutronInelasticProcess->RegisterMe( theNeutronLENeutronInelastic );
   //theNeutronInelasticProcess->RegisterMe( theNeutronHENeutronInelastic );
   G4NeutronHPInelastic* theNeutronHPInelastic  = new   G4NeutronHPInelastic();
   theNeutronHPInelastic->SetMaxEnergy( 20.*CLHEP::MeV );	
   theNeutronInelasticProcess->RegisterMe( theNeutronHPInelastic );
   theNeutronInelasticProcess->RegisterMe( theNeutronHENeutronInelastic );
   AddDataSet(theNeutronInelasticProcess, new G4NeutronHPInelasticData() );
   theNeutronInelasticProcess->RegisterMe(thePreEqNeutron);
   theNeutronInelasticProcess->RegisterMe(theCasc);
   theNeutronInelasticProcess->RegisterMe(theModel);
   pmanager->AddDiscreteProcess( theNeutronInelasticProcess );

   G4HadronFissionProcess* theHadronFissionProcess = new   G4HadronFissionProcess();
   G4LFission* theNeutronLFission = new   G4LFission();
   //theHadronFissionProcess->RegisterMe( theNeutronLFission );
   G4NeutronHPFission* theNeutronHPFission = new   G4NeutronHPFission();
   theNeutronHPFission->SetMaxEnergy( 20.*CLHEP::MeV );
   theNeutronLFission->SetMinEnergy( 20.*CLHEP::MeV );
   theHadronFissionProcess->RegisterMe( theNeutronHPFission );
   theHadronFissionProcess->RegisterMe( theNeutronLFission );
   AddDataSet(theHadronFissionProcess, new G4NeutronHPFissionData() );
   pmanager->AddDiscreteProcess( theHadronFissionProcess );
   
   G4HadronCaptureProcess* theCaptureProcess = new G4HadronCaptureProcess();
   G4LCapture* theNeutronLCapture =  new G4LCapture();
   //theCaptureProcess->RegisterMe( theNeutronLCapture );
   G4NeutronHPCapture *theNeutronHPCapture = new G4NeutronHPCapture();
   theNeutronHPCapture->SetMaxEnergy( 20.*CLHEP::MeV );
   theNeutronLCapture->SetMinEnergy( 20.*CLHEP::MeV );
   theCaptureProcess->RegisterMe( theNeutronHPCapture );
   theCaptureProcess->RegisterMe( theNeutronLCapture );
   AddDataSet(theCaptureProcess, new G4NeutronHPCaptureData() );
   pmanager->AddDiscreteProcess( theCaptureProcess );
     
   //anti-neutron
   pmanager = G4AntiNeutron::AntiNeutron()->GetProcessManager();
   G4HadronElasticProcess* theanElasticProcess = new G4HadronElasticProcess();
   G4LElastic* theanElasticModel = new G4LElastic();
   theanElasticProcess->RegisterMe(theanElasticModel);
   pmanager->AddDiscreteProcess(theanElasticProcess);
   G4AntiNeutronInelasticProcess* theAntiNeutronInelasticProcess = new G4AntiNeutronInelasticProcess(); 
   G4LEAntiNeutronInelastic* theAntiNeutronLEPModel = new G4LEAntiNeutronInelastic();
   G4HEAntiNeutronInelastic* theAntiNeutronHEPModel = new G4HEAntiNeutronInelastic();
   theAntiNeutronInelasticProcess->RegisterMe(theAntiNeutronLEPModel);
   theAntiNeutronInelasticProcess->RegisterMe(theAntiNeutronHEPModel);
   pmanager->AddDiscreteProcess(theAntiNeutronInelasticProcess);
   G4AntiNeutronAnnihilationAtRest* theAntiNeutronAnnihilation = new G4AntiNeutronAnnihilationAtRest();
   pmanager->AddRestProcess(theAntiNeutronAnnihilation);
}   


#include "G4DeuteronInelasticProcess.hh"
#include "G4LEDeuteronInelastic.hh"
#include "G4TritonInelasticProcess.hh"
#include "G4LETritonInelastic.hh"
#include "G4AlphaInelasticProcess.hh"
#include "G4LEAlphaInelastic.hh"
void ExN03PhysicsList::ConstructIon()
{
 G4ProcessManager* pManager = 0;
   // --- Deuteron :  -------------------------------------------------------
   pManager = G4Deuteron::Deuteron()->GetProcessManager();
   G4HadronElasticProcess* thedueElasticProcess = new G4HadronElasticProcess();
   G4LElastic* thedueElasticModel = new G4LElastic();
   thedueElasticProcess->RegisterMe(thedueElasticModel);
   pManager->AddDiscreteProcess(thedueElasticProcess);
   G4DeuteronInelasticProcess* theDeuteronInelasticProcess = new G4DeuteronInelasticProcess();
   G4LEDeuteronInelastic* theDeuteronLEPModel = new G4LEDeuteronInelastic();
   theDeuteronInelasticProcess->RegisterMe(theDeuteronLEPModel);
   pManager->AddDiscreteProcess(theDeuteronInelasticProcess);

   // --- Triton :  ---------------------------------------------------------
   pManager = G4Triton::Triton()->GetProcessManager();
   G4HadronElasticProcess* thetriElasticProcess = new G4HadronElasticProcess();
   G4LElastic* thetriElasticModel = new G4LElastic();
   thetriElasticProcess->RegisterMe(thetriElasticModel);
   pManager->AddDiscreteProcess(thetriElasticProcess);
   G4TritonInelasticProcess* theTritonInelasticProcess = new G4TritonInelasticProcess();
   G4LETritonInelastic* theTritonLEPModel = new G4LETritonInelastic();
   theTritonInelasticProcess->RegisterMe(theTritonLEPModel);
   pManager->AddDiscreteProcess(theTritonInelasticProcess);

   // --- Alpha :  --------------------------------------------------------
   pManager = G4Alpha::Alpha()->GetProcessManager();
   G4HadronElasticProcess* thealElasticProcess = new G4HadronElasticProcess();
   G4LElastic* thealElasticModel = new G4LElastic();
   thealElasticProcess->RegisterMe(thealElasticModel);
   pManager->AddDiscreteProcess(thealElasticProcess);
   G4AlphaInelasticProcess* theAlphaInelasticProcess = new G4AlphaInelasticProcess();
   G4LEAlphaInelastic* theAlphaLEPModel = new G4LEAlphaInelastic();
   theAlphaInelasticProcess->RegisterMe(theAlphaLEPModel);
   pManager->AddDiscreteProcess(theAlphaInelasticProcess);

   // --- He3 :  -----------------------------------------------------------
   pManager = G4He3::He3()->GetProcessManager();   
   G4HadronElasticProcess* thehe3ElasticProcess = new G4HadronElasticProcess();
   G4LElastic* thehe3ElasticModel = new G4LElastic();
   thehe3ElasticProcess->RegisterMe(thehe3ElasticModel);
   pManager->AddDiscreteProcess(thehe3ElasticProcess);



}
 








void ExN03PhysicsList::SetCuts()
{
 
  if (verboseLevel >0){
    G4cout << "ExN03PhysicsList::SetCuts:";
    G4cout << "CutLength : " << G4BestUnit(defaultCutValue,"Length") << G4endl;
  }

  // set cut values for gamma at first and for e- second and next for e+,
  // because some processes for e+/e- need cut values for gamma
  SetCutValue(defaultCutValue, "gamma");
  SetCutValue(defaultCutValue, "e-");
  SetCutValue(defaultCutValue, "e+");
  SetCutValue(defaultCutValue, "neutron");
  SetCutValue(defaultCutValue, "proton");
  SetCutValue(defaultCutValue, "alpha");
  SetCutValue(defaultCutValue, "GenericIon");

  if (verboseLevel>0) DumpCutValuesTable();
}



